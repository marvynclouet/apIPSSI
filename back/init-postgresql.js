const { Pool } = require('pg');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

async function initializePostgreSQL() {
  console.log('üóÑÔ∏è Initialisation de la base de donn√©es PostgreSQL...');
  
  let pool;
  
  try {
    // Cr√©er le pool de connexion
    pool = new Pool({
      host: process.env.DB_HOST,
      port: process.env.DB_PORT || 5432,
      user: process.env.DB_USER || 'postgres',
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME || 'bddfinalgsb',
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
    });

    console.log('‚úÖ Connexion √† PostgreSQL √©tablie');

    // Lire le fichier SQL PostgreSQL
    const sqlFile = path.join(__dirname, 'schema-postgresql.sql');
    const sqlContent = await fs.readFile(sqlFile, 'utf8');
    
    console.log('üìÑ Lecture du fichier SQL PostgreSQL...');
    
    // Diviser en requ√™tes individuelles en respectant les blocs BEGIN/COMMIT
    const queries = [];
    let currentQuery = '';
    const lines = sqlContent.split('\n');
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      
      // Ignorer les lignes vides et commentaires
      if (!trimmedLine || trimmedLine.startsWith('--') || trimmedLine.startsWith('/*')) {
        continue;
      }
      
      currentQuery += line + '\n';
      
      // Si la ligne se termine par un point-virgule, c'est la fin d'une requ√™te
      if (trimmedLine.endsWith(';')) {
        queries.push(currentQuery.trim());
        currentQuery = '';
      }
    }
    
    // Ajouter la derni√®re requ√™te si elle existe
    if (currentQuery.trim()) {
      queries.push(currentQuery.trim());
    }

    console.log(`üîß Ex√©cution de ${queries.length} requ√™tes...`);

    for (let i = 0; i < queries.length; i++) {
      const query = queries[i];
      if (query.trim()) {
        try {
          console.log(`üìù Ex√©cution requ√™te ${i + 1}/${queries.length}:`);
          console.log(query.substring(0, 100) + (query.length > 100 ? '...' : ''));
          await pool.query(query);
          console.log(`‚úÖ Requ√™te ${i + 1}/${queries.length} ex√©cut√©e avec succ√®s`);
        } catch (error) {
          console.error(`‚ùå Erreur sur la requ√™te ${i + 1}:`);
          console.error('Requ√™te:', query);
          console.error('Erreur:', error.message);
        }
      }
    }

    console.log('üéâ Base de donn√©es PostgreSQL initialis√©e avec succ√®s !');

    // V√©rifier les tables cr√©√©es
    const tablesResult = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    console.log('üìã Tables cr√©√©es :');
    tablesResult.rows.forEach(table => {
      console.log(`  - ${table.table_name}`);
    });

    // V√©rifier les utilisateurs
    try {
      const usersResult = await pool.query('SELECT id, email, role FROM users');
      console.log('üë• Utilisateurs cr√©√©s :');
      usersResult.rows.forEach(user => {
        console.log(`  - ID: ${user.id}, Email: ${user.email}, R√¥le: ${user.role}`);
      });
    } catch (error) {
      console.log('‚ö†Ô∏è Table users pas encore cr√©√©e ou vide');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation :', error);
    throw error;
  } finally {
    if (pool) {
      await pool.end();
      console.log('üîå Connexion ferm√©e');
    }
  }
}

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
  initializePostgreSQL()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script √©chou√© :', error);
      process.exit(1);
    });
}

module.exports = initializePostgreSQL; 