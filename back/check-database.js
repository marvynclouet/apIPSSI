const mysql = require('mysql2/promise');
require('dotenv').config();

async function checkDatabase() {
  console.log('üîç V√©rification de la base de donn√©es...');
  
  let connection;
  
  try {
    // Connexion √† la base de donn√©es
    connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      port: process.env.DB_PORT || 3306,
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME || 'bddfinalgsb'
    });

    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // V√©rifier les tables
    const [tables] = await connection.execute('SHOW TABLES');
    console.log('\nüìã Tables disponibles :');
    tables.forEach(table => {
      console.log(`  - ${Object.values(table)[0]}`);
    });

    // V√©rifier les donn√©es dans chaque table
    console.log('\nüìä Statistiques des donn√©es :');
    
    // Utilisateurs
    try {
      const [users] = await connection.execute('SELECT COUNT(*) as count FROM users');
      console.log(`  üë• Utilisateurs : ${users[0].count}`);
    } catch (error) {
      console.log('  üë• Utilisateurs : Table non trouv√©e');
    }

    // M√©dicaments
    try {
      const [medicaments] = await connection.execute('SELECT COUNT(*) as count FROM medicaments');
      console.log(`  üíä M√©dicaments : ${medicaments[0].count}`);
    } catch (error) {
      console.log('  üíä M√©dicaments : Table non trouv√©e');
    }

    // Commandes
    try {
      const [orders] = await connection.execute('SELECT COUNT(*) as count FROM orders');
      console.log(`  üì¶ Commandes : ${orders[0].count}`);
    } catch (error) {
      console.log('  üì¶ Commandes : Table non trouv√©e');
    }

    // V√©rifier la structure de la base de donn√©es
    console.log('\nüèóÔ∏è Structure de la base de donn√©es :');
    
    for (const table of tables) {
      const tableName = Object.values(table)[0];
      try {
        const [columns] = await connection.execute(`DESCRIBE ${tableName}`);
        console.log(`\n  üìã Table : ${tableName}`);
        columns.forEach(column => {
          console.log(`    - ${column.Field} (${column.Type})`);
        });
      } catch (error) {
        console.log(`  ‚ùå Erreur lors de la v√©rification de ${tableName}`);
      }
    }

    console.log('\n‚úÖ V√©rification termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification :', error.message);
    
    if (error.code === 'ER_BAD_DB_ERROR') {
      console.log('\nüí° Solution : La base de donn√©es n\'existe pas encore.');
      console.log('   Ex√©cutez : npm run init-db');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Solution : Impossible de se connecter √† MySQL.');
      console.log('   V√©rifiez les variables d\'environnement DB_HOST et DB_PASSWORD');
    }
    
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Connexion ferm√©e');
    }
  }
}

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
  checkDatabase()
    .then(() => {
      console.log('\nüéâ Script de v√©rification termin√©');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Script de v√©rification √©chou√©');
      process.exit(1);
    });
}

module.exports = checkDatabase; 